name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25

    env:
      FORCE_COLOR: 0
      CI: true

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pnpm install --ignore-scripts || pnpm install --no-frozen-lockfile --ignore-scripts
      timeout-minutes: 5

    - name: Rebuild native dependencies for Electron
      run: pnpm run prepare:electron
      timeout-minutes: 5

    - name: Install additional Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends libnss3-dev libgbm1 libxss1 libasound2t64
      timeout-minutes: 2

    - name: Run linting
      run: pnpm run lint

    - name: Build application (Windows)
      if: matrix.os == 'windows-latest'
      run: pnpm run build:win
      env:
        CI: true

    - name: Build application (macOS)
      if: matrix.os == 'macos-latest'
      run: pnpm run build:mac
      env:
        CI: true
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Build application (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: pnpm run build:linux
      env:
        CI: true

    - name: List build output
      run: |
        echo "Contents of release directory:"
        ls -la release/ || echo "No release directory found"
        echo "Build artifacts found:"
        find . -name "*Setup.exe" -o -name "*Portable.exe" -o -name "*.dmg" -o -name "*.AppImage" || echo "No build artifacts found"

    - name: Upload artifacts (Windows - Installer)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: seekr-windows-installer
        path: 'release/**/*Setup.exe'
        if-no-files-found: error

    - name: Upload artifacts (Windows - Portable)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: seekr-windows-portable
        path: 'release/**/*Portable.exe'
        if-no-files-found: error

    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: seekr-macos
        path: 'release/**/*Installer.dmg'
        if-no-files-found: error

    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: seekr-linux
        path: 'release/**/*.AppImage'
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          seekr-windows-installer/**
          seekr-windows-portable/**
          seekr-macos/**
          seekr-linux/**
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
